// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Authentication {
  id                String    @id() @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  refreshToken      String?
  refreshExpiresAt  DateTime?
  recoveryToken     String?
  recoveryExpiresAt DateTime?
  confirmToken      String?
  confirmExpiresAt  DateTime?
  confirmCode       Int?
  recoveryCode      Int?
  emailUpdatedAt    DateTime?
  provider          Provider  @default(email)
  loginType         LoginType @default(password)
  lastLogin         DateTime?
  passwordChangedAt DateTime?
  password          String?
  userId            String?   @unique
  User              User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Session {
//   id        String   @id() @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   expiresAt DateTime
//   refreshToken String
//   refreshExpiresAt DateTime
//   userId    String?
//   User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

enum Provider {
  email
}

enum LoginType {
  password
  // google
  // facebook
}

enum Role {
  user
  admin
}

model User {
  id             String          @id() @default(uuid())
  createdAt      DateTime        @default(now())
  confirmed      Boolean         @default(false)
  confirmedAt    DateTime?
  email          String          @unique
  role           Role            @default(user)
  name           String?
  Account        Account[]
  Item           Item[]
  Objectif       Objectif[]
  Authentication Authentication?
}

model Account {
  id          String     @id() @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String?    @default("")
  description String?
  userId      String?
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Item        Item[]
  Objectif    Objectif[]
  status      ItemStatus @default(published)
}

enum ItemStatus {
  published
  archived
  deleted
}

enum Recurrence {
  day
  week
  month
  year
}

model Item {
  id          String     @id() @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String?    @default("")
  description String?
  value       Float
  category    String?
  isExpense   Boolean?   @default(true)
  date        DateTime
  accountId   String
  userId      String?
  User        User?      @relation(fields: [userId], references: [id])
  status      ItemStatus @default(published)
  Account     Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Objectif {
  id                 String         @id() @default(uuid())
  accountId          String
  userId             String?
  User               User?          @relation(fields: [userId], references: [id])
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now())
  title              String?        @default("")
  description        String?
  from               DateTime?
  to                 DateTime?
  deadline           DateTime?
  targetAmount       Float
  categories         String[]
  isRecurrent        Boolean        @default(false)
  recurrence         Recurrence?
  recurrenceInterval Int?           @default(1)
  isCompleted        Boolean        @default(false)
  type               ObjectifType   @default(savings)
  Account            Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  status             ObjectifStatus @default(active)
}

enum ObjectifType {
  savings
  income
}

enum ObjectifStatus {
  active
  completed
  archived
  deleted
}
